#!/usr/bin/perl

# if graph is missing on your system, use "apt-get install libdeps-perl"

use strict;
use warnings;

use Data::Dumper;
use graphincludes::graph;
use DEPS::Transform::TransitiveReduction;

use File::Basename;
use lib dirname($0);
use actions;

my %incs;

my $graph = graphincludes::graph->new();
my $res;

$graph->record_node("root");

foreach my $act (keys %actions) {
    print "$act\n";
    $incs{$actions{$act}{include}} = 1 if $actions{$act}{include};
    $graph->record_node($act);
    $graph->record_edge("root", $act);

    for my $dep ( @{$actions{$act}{chain}} ) {
	$graph->record_node($dep);
	$graph->record_edge($act, $dep);
	print "  -> $dep\n";
    }
}

my @parentnodes = ( "root" );
my @graphs = map { $graph } @parentnodes;

# print Dumper(@graphs);

$res = DEPS::Transform::TransitiveReduction::apply(graphs => \@graphs);

# print Dumper($res);

my @keys;
my %nodes;
my @order;

# compute weight of node (longest path from root to that node)
#
# traverse the graph starting with 'root'
# - 1. record all nodes with edges from root to node, remove
# - 2. then all nodes with edges from nodes from the step above
# - 3. repeat step 2.

@keys  = ("root");
%nodes = ("root" => 0);

while (@keys) {
    my $k = pop(@keys);
    my $weight = $nodes{$k};

    foreach my $edge ($res->get_edges_from($k)) {
	push(@keys, $edge->{DST}{LABEL});
	$nodes{$edge->{DST}{LABEL}} = $weight + 1;
    }
}
delete $nodes{"root"};

# order action by their weight (longes path from root)
foreach my $k (sort {$nodes{$a} cmp $nodes{$b} } keys %nodes)
{
    push(@order, $k);
}

open(OUT, ">", "tr069/tr069_action_table.h") or die "Can't open 'tr069/tr069_action_table.h'";

print OUT "/*
 *    __                        __      _
 *   / /__________ __   _____  / /___  (_)___  ____ _
 *  / __/ ___/ __ `/ | / / _ \\/ / __ \\/ / __ \\/ __ `/
 * / /_/ /  / /_/ /| |/ /  __/ / /_/ / / / / / /_/ /
 * \\__/_/   \\__,_/ |___/\\___/_/ .___/_/_/ /_/\\__, /
 *                           /_/            /____/
 *
 * (c) Travelping GmbH <info\@travelping.com>
 *
 */

/*
 * WARNING: This file has been autogenerated by tablegen/deps.pl
 *
 *            !!! DO NOT MODIFY MANUALLY !!!
 */

#ifndef __TR069_ACTION_TABLE_H
#define __TR069_ACTION_TABLE_H

enum dm_actions {
\tDM_NONE,\n";

foreach my $node (@order) {
    printf OUT "\tDM_%s,\n", uc($node);
}
print OUT "};

#endif
";

close(OUT);

open(OUT, ">", "tr069/tr069_action_table.c") or die "Can't open 'tr069/tr069_action_table.c'";

print OUT "/*
 *    __                        __      _
 *   / /__________ __   _____  / /___  (_)___  ____ _
 *  / __/ ___/ __ `/ | / / _ \\/ / __ \\/ / __ \\/ __ `/
 * / /_/ /  / /_/ /| |/ /  __/ / /_/ / / / / / /_/ /
 * \\__/_/   \\__,_/ |___/\\___/_/ .___/_/_/ /_/\\__, /
 *                           /_/            /____/
 *
 * (c) Travelping GmbH <info\@travelping.com>
 *
 */

/*
 * WARNING: This file has been autogenerated by tablegen/deps.pl
 *
 *            !!! DO NOT MODIFY MANUALLY !!!
 */

#ifdef HAVE_CONFIG_H
#include \"config.h\"
#endif

#include \"tr069_token.h\"
#include \"tr069_action.h\"
#include \"tr069_action_table.h\"

";

foreach my $inc (keys %incs) {
    printf OUT "#include \"%s\"\n", $inc;
}
print OUT "\n";

foreach my $k (@order) {
    my @e = $res->get_edges_from($k);

    if ($actions{$k}{comment}) {
	printf OUT "%s\n", $actions{$k}{comment};
    }
    printf OUT "static struct tr069_action dm_%s = {\n", $k;
    printf OUT "\t.sel_len = %d,\n\n", $actions{$k}{sel};

    printf OUT "\t.pre = %s,\n", $actions{$k}{pre} ? "dm_${k}_pre" : "NULL";
    printf OUT "\t.action = %s,\n", $actions{$k}{action} ? "dm_${k}_action" : "NULL";
    printf OUT "\t.post = %s,\n\n", $actions{$k}{post} ? "dm_${k}_post" : "NULL";

    printf OUT "\t.chain_cnt = %d,\n", $#e + 1;
    if (@e) {
	print OUT "\t.chain = {";
    }

    foreach my $edge (@e) {
	printf OUT " DM_%s,", uc($edge->{DST}{LABEL});
    }
    if (@e) {
	print OUT " },\n";
    }
    print OUT "};\n\n";
}

print OUT "const struct tr069_action *dm_actions[] = {\n";
foreach my $node (@order) {
    printf OUT "\t[DM_%s] = &dm_%s,\n", uc($node), $node;
}
print OUT "};\n";

close(OUT);

open(OUT, ">", "tr069/tr069_action_debug.c") or die "Can't open 'tr069/tr069_action_debug.c'";

print OUT "/*
 *    __                        __      _
 *   / /__________ __   _____  / /___  (_)___  ____ _
 *  / __/ ___/ __ `/ | / / _ \\/ / __ \\/ / __ \\/ __ `/
 * / /_/ /  / /_/ /| |/ /  __/ / /_/ / / / / / /_/ /
 * \\__/_/   \\__,_/ |___/\\___/_/ .___/_/_/ /_/\\__, /
 *                           /_/            /____/
 *
 * (c) Travelping GmbH <info\@travelping.com>
 *
 */

/*
 * WARNING: This file has been autogenerated by tablegen/deps.pl
 *
 *            !!! DO NOT MODIFY MANUALLY !!!
 */

static const char *t_actions[] = {
\ttype_map_init(DM_NONE),
";

foreach my $act (keys %actions) {
    printf OUT "\ttype_map_init(DM_%s),\n", uc($act);
}

print OUT "};\n";

close(OUT);
